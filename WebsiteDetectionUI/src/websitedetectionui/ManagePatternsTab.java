/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package websitedetectionui;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import patternMatcher.IdentificationEngine;
import utilities.DBConnect;
import webcrawler.WebCrawler;

/**
 *
 * @author Subu
 */
public class ManagePatternsTab extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatternsTab
     */
    Connection dbCon;
    public ManagePatternsTab() {
        initComponents();
        /*
         * Comment out the below line if the PrototypeMainFrame does not compile.
         * 
         * Compile the project and uncomment the line below again to get the 
         * functionality of the managepatterns tab as well.
         * 
         */
        populateTree();
    }
    
    private void populateTree(){
        ResultSet rs = null;
        ResultSet rs2 = null;
        Statement st = null;
        Statement st2 = null;
        PreparedStatement pst = null;
        DefaultTreeModel model;
        
        dbCon = DBConnect.getConnection();
        
        try{
            dbCon.setAutoCommit(false);
            st = dbCon.createStatement();
            st2 = dbCon.createStatement();
            rs = st.executeQuery("SELECT * FROM pattern_group");
            
            //Initialize list of values
            patternGroupTree.removeAll();
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("All patterns");
            while(rs.next()){
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(rs.getString("PATTERN_GROUP_VALUE"));
                root.add(node);
                
                rs2 = st2.executeQuery("SELECT * FROM pattern where pattern_group_id = "+rs.getLong("PATTERN_GROUP_ID"));
                
                while(rs2.next()){
                    node.add(new DefaultMutableTreeNode(rs2.getString("PATTERN_VALUE")));
                }
            }
            model = new DefaultTreeModel(root);
            patternGroupTree = new JTree(model);
            patternGroupTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
            parentScroll.setViewportView(patternGroupTree);
        }
        catch(SQLException ex){
            Logger.getLogger(WebCrawler.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try{
                if(rs!=null)
                    rs.close();
                if(st!=null)
                    st.close();
                if(rs2!=null)
                    rs2.close();
                if(st2!=null)
                    st2.close();
                if(pst!=null)
                    pst.close();
            }catch(Exception ignore){}
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parentScroll = new javax.swing.JScrollPane();
        patternGroupTree = new javax.swing.JTree();
        removePatternButton = new javax.swing.JButton();
        addPatternButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setName("Manage Patterns");

        parentScroll.setViewportView(patternGroupTree);
        patternGroupTree.getAccessibleContext().setAccessibleName("patternGroupTree");
        patternGroupTree.getAccessibleContext().setAccessibleDescription("");

        removePatternButton.setText("Remove");
        removePatternButton.setToolTipText("");
        removePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePatternButtonActionPerformed(evt);
            }
        });

        addPatternButton.setText("Add Pattern");
        addPatternButton.setToolTipText("");
        addPatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatternButtonActionPerformed(evt);
            }
        });

        jTextField1.setText("Enter Pattern");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Run Pattern Matching");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(addPatternButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removePatternButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addPatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removePatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        removePatternButton.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void addPatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatternButtonActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) patternGroupTree.getLastSelectedPathComponent();
        String toAdd;
        if(node == null )
            return;
        if(node.getParent() == null)
            toAdd = "All patterns";
        else{
            if(node.getParent().toString().equals("All patterns"))
                toAdd = node.toString();
            else
                toAdd = node.getParent().toString();
        }
        
        ResultSet rs = null;
        Statement st = null;
        PreparedStatement pst = null;
        
        try{
            st = dbCon.createStatement();
            //Add pattern group
            if(toAdd.equals("All patterns")){
                String insertStatement = "INSERT INTO PATTERN_GROUP(PATTERN_GROUP_ID,PATTERN_GROUP_VALUE,CREATED_DATE,CREATING_USER) VALUES(pattern_group_sequence.nextval,?,sysdate,1)";
                pst = dbCon.prepareStatement(insertStatement);
                pst.setString(1, jTextField1.getText());
                pst.execute();
            }
            //Add pattern
            else{
                rs = st.executeQuery("SELECT * FROM PATTERN_GROUP WHERE PATTERN_GROUP_VALUE ='"+toAdd+"'");
                if(rs.next()){
                    String insertStatement = "INSERT INTO PATTERN(PATTERN_ID,PATTERN_GROUP_ID,PATTERN_VALUE) VALUES(pattern_sequence.nextval,?,?)";
                    pst = dbCon.prepareStatement(insertStatement);
                    pst.setLong(1, rs.getLong("PATTERN_GROUP_ID"));
                    pst.setString(2, jTextField1.getText());
                    pst.execute();
                }
                else{
                    System.out.println("Pattern group not found error");
                    return;
                }
            }
            populateTree();
        }
        catch(SQLException ex){
            Logger.getLogger(WebCrawler.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try{
                if(rs!=null)
                    rs.close();
                if(st!=null)
                    st.close();
                if(pst!=null)
                    pst.close();
            }catch(Exception ignore){}
        }
    }//GEN-LAST:event_addPatternButtonActionPerformed

    private void removePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePatternButtonActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) patternGroupTree.getLastSelectedPathComponent();
        if(node == null || node.getParent() == null)
            return;
        String parent = node.getParent().toString();
        String child = node.toString();
        
        ResultSet rs = null;
        Statement st = null;
        PreparedStatement pst = null;
        
        try{
            st = dbCon.createStatement();
            //Delte pattern group
            if(parent.equals("All patterns")){
                
            }
            //Delete pattern
            else{
                rs = st.executeQuery("SELECT * FROM PATTERN_GROUP WHERE PATTERN_GROUP_VALUE ='"+parent+"'");
                if(rs.next()){
                    String deleteMatches = "DELETE FROM PATTERN_MATCH WHERE PATTERN_ID in"
                            + "(SELECT PATTERN_ID FROM PATTERN WHERE PATTERN_GROUP_ID=? AND PATTERN_VALUE=?)";
                    pst = dbCon.prepareStatement(deleteMatches);
                    pst.setLong(1, rs.getLong("PATTERN_GROUP_ID"));
                    pst.setString(2, child);
                    pst.execute();
                    pst.close();
                    
                    String deleteStatement = "DELETE FROM PATTERN WHERE PATTERN_GROUP_ID = ? AND PATTERN_VALUE = ?";
                    pst = dbCon.prepareStatement(deleteStatement);
                    pst.setLong(1, rs.getLong("PATTERN_GROUP_ID"));
                    pst.setString(2, child);
                    pst.execute();
                }else{
                    System.out.println("Pattern group not found error");
                    return;
                }
                
            }
            populateTree();
        }
        catch(SQLException ex){
            Logger.getLogger(WebCrawler.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try{
                if(rs!=null)
                    rs.close();
                if(st!=null)
                    st.close();
                if(pst!=null)
                    pst.close();
            }catch(Exception ignore){}
        }
    }//GEN-LAST:event_removePatternButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        try{
            dbCon.commit();
            populateTree();
        }
        catch(SQLException ex){
            Logger.getLogger(WebCrawler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        try{
            dbCon.rollback();
            populateTree();
        }
        catch(SQLException ex){
            Logger.getLogger(WebCrawler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        IdentificationEngine ie = new IdentificationEngine();
        ie.storePatternMatches(DBConnect.getConnection());
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatternButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JScrollPane parentScroll;
    private javax.swing.JTree patternGroupTree;
    private javax.swing.JButton removePatternButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
